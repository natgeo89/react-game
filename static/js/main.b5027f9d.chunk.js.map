{"version":3,"sources":["moveHandlers/move.js","components/Cell.js","components/Info.js","assets/images/rss.svg","components/Footer.js","components/Game.js","index.js"],"names":["move","cells","reduce","accum","index","value","isCellEmpty","prevCell","canMove","isMerged","endIndex","rotateArray","array","matrix","Array","from","arr","slice","createMatrixFromArray","map","col","i","row","reverse","flat","Cell","props","isNew","cellClass","newNumber","merged","className","Info","Footer","href","rel","target","src","rss","alt","Game","cellsCount","initArray","getCellsWithNewRandomNumber","fill","savedArray","localStorage","getItem","JSON","parse","getSavedGameArray","useState","setCells","handleKeyUp","newCells","key","moveUp","rotatedArray","moveLeft","moveDown","moveRight","document","addEventListener","once","movedArray","copyCells","stringify","isCellsMoved","cellsWithNewNumber","cellsCopy","randomIndex","emptyIndexes","Math","floor","random","length","getRandomEmptyIndexFrom","randomValue","ind","useEffect","arrForSave","setItem","saveGameArrayInLS","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b5027f9d.chunk.js","sourcesContent":["function move(cells) {\n  const cellsMoved = [...cells].reduce((accum, {value}, index) => {\n    const isCellEmpty = value === null;\n    let prevCell = accum[index-4];\n    const canMove = prevCell && (prevCell.value === null || prevCell.value === value);\n\n    if (isCellEmpty) {\n      return [...accum, {value : value, isMerged: false}];\n    } else if(canMove) {\n      let endIndex = index;\n      while (accum[endIndex-4] && (accum[endIndex-4].value === null || accum[endIndex-4].value === value)) {\n        endIndex = endIndex - 4;\n      }\n      \n      // if values match\n      if (accum[endIndex].value === value && !accum[endIndex].isMerged) {\n        accum[endIndex] = {value: value * 2, isMerged: true};\n        accum[index] = {value: null, isMerged: false};\n      } else {\n        // if values don't match, cells only moving at endIndex place\n        accum[endIndex] = {value: value, isMerged: false};\n        accum[index] = {value: null, isMerged: false};\n      }\n      return accum;\n\n    } else {\n      accum[index] = {value: value, isMerged: false};\n      return accum;\n    }\n  }, [])\n\n  return cellsMoved;\n}\n\nfunction createMatrixFromArray(array) {\n  const gameSize = 4;\n  return Array.from(Array(gameSize), (arr, index) => array.slice(index * gameSize, gameSize * (index + 1)));\n}\n\nfunction rotateArray(array) {\n  const matrix = createMatrixFromArray([...array]);\n  const rotatedMatrix = matrix[0].map((col, i) => matrix.map(row => row[i]).reverse());\n\n  return rotatedMatrix.flat();\n}\n\nexport function moveUp(cells) {\n  return move(cells);\n}\n\nexport function moveLeft(cells) {\n  const rotatedArray = rotateArray(cells);\n  const movedArray = move(rotatedArray);\n  return rotateArray(rotateArray(rotateArray(movedArray)));\n}\n\nexport function moveDown(cells) {\n  const rotatedArray = rotateArray(rotateArray(cells))\n  const movedArray = move(rotatedArray);\n  return rotateArray(rotateArray(movedArray));\n}\n\nexport function moveRight(cells) {\n  const rotatedArray = rotateArray(rotateArray(rotateArray(cells)))\n  const movedArray = move(rotatedArray);\n  return rotateArray(movedArray);\n}\n","import React from 'react';\n\nexport default function Cell(props) {\n  const {value, isNew, isMerged} = props;\n  const cellClass = value ? `cell-${value}` : '';\n  const newNumber = isNew ? `new-number` : '';\n  const merged = isMerged ? `merged` : '';\n  return (\n    <div\n      className={`cell ${cellClass} ${newNumber} ${merged}`}\n    >\n      {value}\n    </div>\n  )\n}","import React from 'react';\n\nexport default function Info(props) {\n\n  return (\n    <div>\n      <div className='title-container'>\n        <span className='info-title'>\n          2048\n        </span>\n        <span className='info-subtitle'>\n          Join the tiles, get to <b>2048!</b>\n        </span>\n      </div>\n      <div className='buttons-container'>\n        <button className='btn'>Settings</button>\n        <button className='btn'>Best Scores</button>\n        <button className='btn'>New Game</button>\n      </div>\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/rss.e13a2357.svg\";","import React from 'react';\nimport rss from '../assets/images/rss.svg';\n\nexport default function Footer() {\n\n  return (\n    <div className='footer'>\n      Created by\n      <a\n        className='footer-link'\n        href='https://github.com/natgeo89'\n        rel='noreferrer'\n        target='_blank'>\n          Viktar Sakharuk\n      </a>\n      for\n      <a \n        className='footer-link'\n        href='https://rs.school/js/'\n        rel='noreferrer'\n        target='_blank'>\n          <img\n            className='footer-image'\n            src={rss}\n            alt='Rolling Scope School'/>\n      </a>\n      <span>2021</span>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { moveUp, moveLeft, moveDown, moveRight } from '../moveHandlers/move';\n\nimport Cell from './Cell';\nimport Info from './Info';\nimport Footer from './Footer';\nimport '../style/style.css';\n\nexport default function Game() {\n  const gameSize = 4;\n  const cellsCount = gameSize ** 2;\n  const template = Array(cellsCount).fill({ value: null });\n\n  const initArray = getCellsWithNewRandomNumber(template);\n  const savedArray = getSavedGameArray();\n\n  const [cells, setCells] = useState(savedArray || initArray);\n\n\n  function handleKeyUp({ key }) {\n    let newCells;\n\n    switch (key) {\n      case 'ArrowUp':\n        newCells = moveUp(cells);\n        break;\n      case 'ArrowLeft':\n        newCells = moveLeft(cells);\n        break;\n      case 'ArrowDown':\n        newCells = moveDown(cells);\n        break;\n      case 'ArrowRight':\n        newCells = moveRight(cells);\n        break;\n      default:\n        document.addEventListener('keyup', handleKeyUp, { once: true });\n        return;\n    }\n\n    if (!isCellsMoved(newCells)) {\n      document.addEventListener('keyup', handleKeyUp, { once: true });\n      return;\n    }\n\n    const cellsWithNewNumber = getCellsWithNewRandomNumber(newCells);\n\n    setCells(cellsWithNewNumber);\n  }\n\n  function isCellsMoved(array) {\n    const movedArray = [...array].map(({ value }) => value);\n    const copyCells = [...cells].map(({ value }) => value);\n    return JSON.stringify(movedArray) !== JSON.stringify(copyCells);\n  }\n\n  function getSavedGameArray() {\n    const arr = localStorage.getItem('current-game');\n    return JSON.parse(arr);\n  }\n\n  function saveGameArrayInLS(array) {\n    const arrForSave = [...array].map(({ value, isNew }) => ({ value: value, isNew: isNew }));\n    localStorage.setItem('current-game', JSON.stringify(arrForSave));\n  }\n\n\n  function getCellsWithNewRandomNumber(cells) {\n    const cellsCopy = [...cells];\n    const randomIndex = getRandomEmptyIndexFrom(cellsCopy);\n    const randomValue = Math.random() < 0.5 ? 2 : 4;\n\n    return cellsCopy.map(({ value, isMerged }, ind) => {\n      const val = randomIndex === ind ? randomValue : value;\n      const isNew = randomIndex === ind ? true : false;\n      return {\n        value: val,\n        isNew: isNew,\n        isMerged: isMerged,\n      }\n    });\n  }\n\n  function getRandomEmptyIndexFrom(array) {\n    const emptyIndexes = [...array].reduce((accum, { value }, index) => {\n      if (value === null) {\n        return [...accum, index]\n      } else {\n        return accum;\n      }\n    }, []);\n\n    const randomIndex = Math.floor(Math.random() * emptyIndexes.length);\n\n    return emptyIndexes[randomIndex];\n  }\n\n  useEffect(() => {\n    document.addEventListener('keyup', handleKeyUp, { once: true });\n    saveGameArrayInLS(cells);\n  })\n\n  return (\n    <div className='wrapper'>\n      <div className='game-container'>\n        <Info />\n        <div className='game-field'>\n          {cells.map(({ value, isNew, isMerged }, index) => {\n            return (\n              <Cell key={index} value={value} isNew={isNew} isMerged={isMerged} />\n            )\n          })}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}