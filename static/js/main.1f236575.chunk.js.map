{"version":3,"sources":["moveHandlers/move.js","components/Cell.js","components/Info.js","assets/images/rss.svg","components/Footer.js","components/Game.js","index.js"],"names":["move","cells","reduce","accum","index","value","isCellEmpty","prevCell","canMove","isMerged","endIndex","rotateArray","array","matrix","Array","from","arr","slice","createMatrixFromArray","map","col","i","row","reverse","flat","Cell","props","isNew","cellClass","newNumber","merged","className","Info","score","newGame","onClick","console","log","Footer","href","rel","target","src","rss","alt","Game","handleKeyUp","newCells","key","state","moveUp","rotatedArray","moveLeft","moveDown","moveRight","isCellsMoved","scorePerMove","calcScorePerMove","newScore","saveScoreInLS","setState","cellsWithNewNumber","getCellsWithNewRandomNumber","saveGameArrayInLS","createTemplateArray","cellsCount","fill","createNewGame","template","initArray","movedArray","copyCells","JSON","stringify","getSavedGameArray","localStorage","getItem","parse","arrForSave","setItem","getSavedScore","cellsCopy","randomIndex","getRandomEmptyIndexFrom","randomValue","Math","random","ind","emptyIndexes","floor","length","savedArray","savedScore","document","addEventListener","this","removeEventListener","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1f236575.chunk.js","sourcesContent":["function move(cells) {\n  const cellsMoved = [...cells].reduce((accum, {value}, index) => {\n    const isCellEmpty = value === null;\n    let prevCell = accum[index-4];\n    const canMove = prevCell && (prevCell.value === null || prevCell.value === value);\n\n    if (isCellEmpty) {\n      return [...accum, {value : value, isMerged: false}];\n    } else if(canMove) {\n      let endIndex = index;\n      while (accum[endIndex-4] && (accum[endIndex-4].value === null || accum[endIndex-4].value === value)) {\n        endIndex = endIndex - 4;\n      }\n      \n      // if values match\n      if (accum[endIndex].value === value && !accum[endIndex].isMerged) {\n        accum[endIndex] = {value: value * 2, isMerged: true};\n        accum[index] = {value: null, isMerged: false};\n      } else {\n        // if values don't match, cells only moving at endIndex place\n        accum[endIndex] = {value: value, isMerged: false};\n        accum[index] = {value: null, isMerged: false};\n      }\n      return accum;\n\n    } else {\n      accum[index] = {value: value, isMerged: false};\n      return accum;\n    }\n  }, [])\n\n  return cellsMoved;\n}\n\nfunction createMatrixFromArray(array) {\n  const gameSize = 4;\n  return Array.from(Array(gameSize), (arr, index) => array.slice(index * gameSize, gameSize * (index + 1)));\n}\n\nfunction rotateArray(array) {\n  const matrix = createMatrixFromArray([...array]);\n  const rotatedMatrix = matrix[0].map((col, i) => matrix.map(row => row[i]).reverse());\n\n  return rotatedMatrix.flat();\n}\n\nexport function moveUp(cells) {\n  return move(cells);\n}\n\nexport function moveLeft(cells) {\n  const rotatedArray = rotateArray(cells);\n  const movedArray = move(rotatedArray);\n  return rotateArray(rotateArray(rotateArray(movedArray)));\n}\n\nexport function moveDown(cells) {\n  const rotatedArray = rotateArray(rotateArray(cells))\n  const movedArray = move(rotatedArray);\n  return rotateArray(rotateArray(movedArray));\n}\n\nexport function moveRight(cells) {\n  const rotatedArray = rotateArray(rotateArray(rotateArray(cells)))\n  const movedArray = move(rotatedArray);\n  return rotateArray(movedArray);\n}\n","import React from 'react';\n\nexport default function Cell(props) {\n  const {value, isNew, isMerged} = props;\n  const cellClass = value ? `cell-${value}` : '';\n  const newNumber = isNew ? `new-number` : '';\n  const merged = isMerged ? `merged` : '';\n  return (\n    <div\n      className={`cell ${cellClass} ${newNumber} ${merged}`}\n    >\n      {value}\n    </div>\n  )\n}","import React from 'react';\n\nexport default function Info(props) {\n  const { score, newGame } = props;\n\n  function handleClick() {\n    console.log(props)\n    newGame();\n  }\n\n  return (\n    <div>\n      <div className='title-head'>\n        <div className='title-container'>\n          <span className='info-title'>\n            2048\n        </span>\n          <span className='info-subtitle'>\n            Join the tiles, get to <b>2048!</b>\n          </span>\n        </div>\n        <div >\n          <div className='score-text'>Score:</div>\n          <div className='score'>{score}</div>\n        </div>\n      </div>\n      <div className='buttons-container'>\n        <button className='btn'>Settings</button>\n        <button className='btn'>Best Scores</button>\n        <button className='btn' onClick={handleClick}>New Game</button>\n      </div>\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/rss.e13a2357.svg\";","import React from 'react';\nimport rss from '../assets/images/rss.svg';\n\nexport default function Footer() {\n\n  return (\n    <div className='footer'>\n      Created by\n      <a\n        className='footer-link'\n        href='https://github.com/natgeo89'\n        rel='noreferrer'\n        target='_blank'>\n          Viktar Sakharuk\n      </a>\n      for\n      <a \n        className='footer-link'\n        href='https://rs.school/js/'\n        rel='noreferrer'\n        target='_blank'>\n          <img\n            className='footer-image'\n            src={rss}\n            alt='Rolling Scope School'/>\n      </a>\n      <span>2021</span>\n    </div>\n  )\n}","import React from 'react';\nimport { moveUp, moveLeft, moveDown, moveRight } from '../moveHandlers/move';\n\nimport Cell from './Cell';\nimport Info from './Info';\nimport Footer from './Footer';\nimport '../style/style.css';\n\nexport default class Game extends React.Component {\n\n  constructor(props){\n    super(props)\n    const template = this.createTemplateArray();  \n    const initArray = this.getCellsWithNewRandomNumber(template);\n    const savedArray = this.getSavedGameArray();\n  \n    const savedScore = this.getSavedScore();\n\n    this.state = {\n      cells: savedArray || initArray,\n      score: savedScore || 0,\n    }\n  }\n\n  handleKeyUp = ({ key }) => {\n\n    let newCells;\n\n    const {cells, score} = this.state;\n\n    switch (key) {\n      case 'ArrowUp':\n        newCells = moveUp(cells);\n        break;\n      case 'ArrowLeft':\n        newCells = moveLeft(cells);\n        break;\n      case 'ArrowDown':\n        newCells = moveDown(cells);\n        break;\n      case 'ArrowRight':\n        newCells = moveRight(cells);\n        break;\n      default:\n        return;\n    }\n\n\n    if (!this.isCellsMoved(newCells)) {\n      return;\n    }\n\n    const scorePerMove = this.calcScorePerMove(newCells);\n    \n    if (scorePerMove !== 0) {\n      const newScore = score + scorePerMove;\n      this.saveScoreInLS(newScore);\n      this.setState({\n        score: newScore,\n      });\n    }\n\n    const cellsWithNewNumber = this.getCellsWithNewRandomNumber(newCells);\n\n    this.saveGameArrayInLS(cellsWithNewNumber);\n    this.setState({\n      cells: cellsWithNewNumber,\n    });\n  }\n\n  createTemplateArray = () => {\n    const gameSize = 4;\n    const cellsCount = gameSize ** 2;\n    return Array(cellsCount).fill({ value: null });\n  }\n\n  createNewGame = () => {\n    const template = this.createTemplateArray();\n    const initArray = this.getCellsWithNewRandomNumber(template);\n    this.saveScoreInLS(0);\n    this.saveGameArrayInLS(initArray);\n    this.setState({\n      score: 0,\n      cells: initArray,\n    });\n  }\n\n  isCellsMoved = (array) => {\n    const movedArray = [...array].map(({ value }) => value);\n    const copyCells = [...this.state.cells].map(({ value }) => value);\n    return JSON.stringify(movedArray) !== JSON.stringify(copyCells);\n  }\n\n  getSavedGameArray = () => {\n    const arr = localStorage.getItem('current-game');\n    return JSON.parse(arr);\n  }\n\n  saveGameArrayInLS = (array) => {\n    const arrForSave = [...array].map(({ value, isNew }) => ({ value: value, isNew: isNew }));\n    localStorage.setItem('current-game', JSON.stringify(arrForSave));\n  }\n\n  getSavedScore = () => {\n    return +localStorage.getItem('current-score');\n  }\n  \n  saveScoreInLS = (score) => {\n    localStorage.setItem('current-score', score);\n  }\n\n\n  getCellsWithNewRandomNumber = (cells) => {\n    const cellsCopy = [...cells];\n    const randomIndex = this.getRandomEmptyIndexFrom(cellsCopy);\n    const randomValue = Math.random() < 0.5 ? 2 : 4;\n\n    return cellsCopy.map(({ value, isMerged }, ind) => {\n      const val = randomIndex === ind ? randomValue : value;\n      const isNew = randomIndex === ind ? true : false;\n      return {\n        value: val,\n        isNew: isNew,\n        isMerged: isMerged,\n      }\n    });\n  }\n\n  getRandomEmptyIndexFrom = (array) => {\n    const emptyIndexes = [...array].reduce((accum, { value }, index) => {\n      if (value === null) {\n        return [...accum, index]\n      } else {\n        return accum;\n      }\n    }, []);\n\n    const randomIndex = Math.floor(Math.random() * emptyIndexes.length);\n\n    return emptyIndexes[randomIndex];\n  }\n\n  calcScorePerMove = (cells) => {\n    return [...cells].reduce((accum, {value, isMerged}) => isMerged ? accum + value : accum, 0);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyUp);\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <div className='game-container'>\n          <Info newGame={this.createNewGame} score={this.state.score}/>\n          <div className='game-field'>\n            {this.state.cells.map(({ value, isNew, isMerged }, index) => {\n              return (\n                <Cell key={index} value={value} isNew={isNew} isMerged={isMerged} />\n              )\n            })}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}